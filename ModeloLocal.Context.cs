//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Analisis
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProyectoAnalisisEntities1 : DbContext
    {
        public ProyectoAnalisisEntities1()
            : base("name=ProyectoAnalisisEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<sp_LoginUsuario_Result> sp_LoginUsuario(string usuario, string password, string direccionIp, string userAgent, string sistemaOperativo, string dispositivo, string browser)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var direccionIpParameter = direccionIp != null ?
                new ObjectParameter("DireccionIp", direccionIp) :
                new ObjectParameter("DireccionIp", typeof(string));
    
            var userAgentParameter = userAgent != null ?
                new ObjectParameter("UserAgent", userAgent) :
                new ObjectParameter("UserAgent", typeof(string));
    
            var sistemaOperativoParameter = sistemaOperativo != null ?
                new ObjectParameter("SistemaOperativo", sistemaOperativo) :
                new ObjectParameter("SistemaOperativo", typeof(string));
    
            var dispositivoParameter = dispositivo != null ?
                new ObjectParameter("Dispositivo", dispositivo) :
                new ObjectParameter("Dispositivo", typeof(string));
    
            var browserParameter = browser != null ?
                new ObjectParameter("Browser", browser) :
                new ObjectParameter("Browser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LoginUsuario_Result>("sp_LoginUsuario", usuarioParameter, passwordParameter, direccionIpParameter, userAgentParameter, sistemaOperativoParameter, dispositivoParameter, browserParameter);
        }
    
        public virtual ObjectResult<sp_Usuario_CRUD_Result> sp_Usuario_CRUD(string accion, string idUsuario, string nombre, string apellido, Nullable<System.DateTime> fechaNacimiento, Nullable<int> idStatusUsuario, string password, Nullable<int> idGenero, string correoElectronico, string telefonoMovil, Nullable<int> idSucursal, string pregunta, string respuesta, Nullable<int> idRole, byte[] fotografia, Nullable<bool> limpiarFoto, string usuarioAccion, string buscar, Nullable<int> pagina, Nullable<int> tamanoPagina, Nullable<bool> hardDelete, string passwordActual, string passwordNueva)
        {
            var accionParameter = accion != null ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(string));
    
            var idUsuarioParameter = idUsuario != null ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var idStatusUsuarioParameter = idStatusUsuario.HasValue ?
                new ObjectParameter("IdStatusUsuario", idStatusUsuario) :
                new ObjectParameter("IdStatusUsuario", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var idGeneroParameter = idGenero.HasValue ?
                new ObjectParameter("IdGenero", idGenero) :
                new ObjectParameter("IdGenero", typeof(int));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            var telefonoMovilParameter = telefonoMovil != null ?
                new ObjectParameter("TelefonoMovil", telefonoMovil) :
                new ObjectParameter("TelefonoMovil", typeof(string));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            var preguntaParameter = pregunta != null ?
                new ObjectParameter("Pregunta", pregunta) :
                new ObjectParameter("Pregunta", typeof(string));
    
            var respuestaParameter = respuesta != null ?
                new ObjectParameter("Respuesta", respuesta) :
                new ObjectParameter("Respuesta", typeof(string));
    
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            var fotografiaParameter = fotografia != null ?
                new ObjectParameter("Fotografia", fotografia) :
                new ObjectParameter("Fotografia", typeof(byte[]));
    
            var limpiarFotoParameter = limpiarFoto.HasValue ?
                new ObjectParameter("LimpiarFoto", limpiarFoto) :
                new ObjectParameter("LimpiarFoto", typeof(bool));
    
            var usuarioAccionParameter = usuarioAccion != null ?
                new ObjectParameter("UsuarioAccion", usuarioAccion) :
                new ObjectParameter("UsuarioAccion", typeof(string));
    
            var buscarParameter = buscar != null ?
                new ObjectParameter("Buscar", buscar) :
                new ObjectParameter("Buscar", typeof(string));
    
            var paginaParameter = pagina.HasValue ?
                new ObjectParameter("Pagina", pagina) :
                new ObjectParameter("Pagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var hardDeleteParameter = hardDelete.HasValue ?
                new ObjectParameter("HardDelete", hardDelete) :
                new ObjectParameter("HardDelete", typeof(bool));
    
            var passwordActualParameter = passwordActual != null ?
                new ObjectParameter("PasswordActual", passwordActual) :
                new ObjectParameter("PasswordActual", typeof(string));
    
            var passwordNuevaParameter = passwordNueva != null ?
                new ObjectParameter("PasswordNueva", passwordNueva) :
                new ObjectParameter("PasswordNueva", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Usuario_CRUD_Result>("sp_Usuario_CRUD", accionParameter, idUsuarioParameter, nombreParameter, apellidoParameter, fechaNacimientoParameter, idStatusUsuarioParameter, passwordParameter, idGeneroParameter, correoElectronicoParameter, telefonoMovilParameter, idSucursalParameter, preguntaParameter, respuestaParameter, idRoleParameter, fotografiaParameter, limpiarFotoParameter, usuarioAccionParameter, buscarParameter, paginaParameter, tamanoPaginaParameter, hardDeleteParameter, passwordActualParameter, passwordNuevaParameter);
        }
    }
}
